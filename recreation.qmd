---
title: "Data Analysis Replication"
author: "Gentry Miller"
format: 
  html:
    code-overflow: wrap
    
editor: visual
---

# The evolution of the adolescent growth spurt: Urinary biomarkers of bone turnover in wild chimpanzees (*Pan troglodytes*)

**Aaron A. Sandel, Jacob D. Negrey, Milja Arponen, Isabelle R. Clark, Jeremy B. Clift, Rachna B. Reddy, Kaisa K. Ivaska**

### What?

### Why?

### How?

```{r}
#| label: steup
#| echo: true
#| message: false
#| warning: false

source("https://raw.githubusercontent.com/bygentry/AN588_DataAnalysisRecreation_gentrym1/refs/heads/main/scripts/steup.R")
```

Using our setup script, we load the necessary packages and data before prepping the data for analysis. To prepare the data and maintain consistency with the original analysis,

1.  both .csv files are transformed to tables
2.  "Morton"'s sample is removed
3.  the time variable is reformatted to h:m:s
4.  continuous variables are standardized using Z-transformation
5.  relevant variables are extracted
6.  `NA` values are omitted from the data sets.

Let's make some pointers for easier calls throughout this analysis:

```{r}
#| label: Creating Pointers
#| echo: true 
#| message: false

# the concentration of collagen corrected for standard gravity
c1_con <- collag1$NTXnM_SG
# the ages across sample collection dates
c1_age <- collag1$sampleAge

# the concentration of osteocalcin corrected for standard gravity
oc1_con <- osteoc1$uMidOC_SG
# the ages across sample collection dates
oc1_age <- osteoc1$sampleAge
```

We then apply a Box-Cox transformation to the biomarker concentration data to ensure we meet the assumptions of generalized additive modelling (GAM) and segmented regression (SR) and increase our confidence in the models:

```{r}
#| label: Box-Cox - Calculating Lambda

# Box-Cox requires positive values, but the osteocalcin concentrations for Fisher are all 0. The paper doesn't specify how they handled this, so I'm adding a 1e-9 to every value to maintain a similar scale but not exclude the values.
oc1_con[] <- oc1_con[] + 1e-9

# create a plot grid to present the boxcox results side-by-side
par(mfrow = c(1, 2))

# use Box-Cox from the MASS package to estimate the optimal lambda for approximating normality
boxcox(lm(c1_con ~ c1_age))
title("A. Collagen")
boxcox(lm(oc1_con ~ oc1_age))
title("B. Osteocalcin")

# reset plot grid setting
par(mfrow = c(1,1))
```

Now that we have our $\lambda$ we can apply the transformation to approximate a normal residual distribution:

```{r}
#| label: Box-Cox - Extracting Lambda
#| echo: TRUE
#| results: markup
#| fig-show: hide

# extract the lambda 
b <- boxcox(lm(c1_con ~ c1_age))
lambda_c <- b$x[which.max(b$y)]

# extract the lambda
b <- boxcox(lm(oc1_con ~ oc1_age))
lambda_oc <- b$x[which.max(b$y)]
```

Both our $\lambda$ values are above 0, which we can verify as such

```{r}
#| label: Box-Cox - Checking Lambda
#| echo: false
#| eval: true

paste0("Collagen Lambda: ", round(lambda_c, 5))
paste0("Osteocalcin Lambda: ", round(lambda_oc, 5))
```

Since $\lambda$ is greater than 0, we use the formula `(y^lambda - 1) / lambda`

```{r}
#| label: Box-Cox - Applying Transformation

# apply the transformation
c_conT <- (c1_con^lambda_c - 1) / lambda_c
oc_conT <- (oc1_con^lambda_oc - 1) / lambda_oc
```

Now that our data is transformed, we can create GAMs using the `gam()` function from the `mgcv` package.

```{r}
#| label: generalized additive models

collag_gam_mf <- gam()

```
