---
title: "Data Analysis Replication"
author: "Gentry Miller"
format: 
  html:
    code-overflow: wrap
    
editor: visual
---

# The evolution of the adolescent growth spurt: Urinary biomarkers of bone turnover in wild chimpanzees (*Pan troglodytes*)

**Aaron A. Sandel, Jacob D. Negrey, Milja Arponen, Isabelle R. Clark, Jeremy B. Clift, Rachna B. Reddy, Kaisa K. Ivaska**

```{r setup, include=FALSEecho=true, warning=false, comment="##", prompt=true, tidy=true, tidy.opts=list(width.cutoff=75), fig.path="img/"}
```

```{r}
#| label: setup2
#| echo: true
#| message: false
#| warning: false

source("https://raw.githubusercontent.com/bygentry/AN588_DataAnalysisRecreation_gentrym1/refs/heads/main/scripts/steup.R")
```

Using our setup script, we load the necessary packages and data before prepping the data for analysis. To prepare the data and maintain consistency with the original analysis,

1.  both .csv files are transformed to tables
2.  "Morton"'s sample is removed
3.  the time variable is reformatted to h:m:s
4.  continuous variables are standardized using Z-transformation
5.  relevant variables are extracted
6.  `NA` values are omitted from the data sets.

Let's take the averages for each individual

```{r}
#| label: averaging data

coll_data <- collag1 %>%
  group_by(individualID) %>%
  summarise(
    # the mean age across sample collection dates for each individual
    mean_age = mean(sampleAge),
    # the mean concentration of collagen (corr. SG) for each individual
    mean_con = mean(NTXnM_SG),
    sex = first(Sex)
  )

ostc_data <- osteoc1 %>% 
  group_by(individualID) %>% 
  summarise(
    # the mean age across sample collection dates for each individual
    mean_age = mean(sampleAge),
    # the mean concentration of osteocalcin (corr. SG) for each individual
    mean_con = mean(uMidOC_SG),
    sex = first(Sex)
  )
```

Let's make some pointers for easier calls throughout this analysis:

```{r}
#| label: Creating Pointers
#| echo: true 
#| message: false

c_con <- coll_data$mean_con
c_age <- coll_data$mean_age

o_con <- ostc_data$mean_con
o_age <- ostc_data$mean_age
```

We then apply a Box-Cox transformation to the biomarker concentration data to ensure we meet the assumptions of generalized additive modelling (GAM) and segmented regression (SR) and increase our confidence in the models:

```{r}
#| label: Box-Cox - Calculating Lambda

# create a plot grid to present the boxcox results side-by-side
par(mfrow = c(1, 2))

# use Box-Cox from the MASS package to estimate the optimal lambda for approximating normality
boxcox(lm(c_con ~ c_age))
title("A. Collagen")
boxcox(lm(o_con ~ o_age))
title("B. Osteocalcin")

# reset plot grid setting
par(mfrow = c(1,1))
```

Now that we have our $\lambda$ we can apply the transformation to approximate a normal residual distribution:

```{r}
#| label: Box-Cox - Extracting Lambda
#| echo: TRUE
#| results: markup
#| fig-show: hide

# extract the lambda 
b <- boxcox(lm(c_con ~ c_age))
lambda_c <- b$x[which.max(b$y)]

# extract the lambda
b <- boxcox(lm(o_con ~ o_age))
lambda_oc <- b$x[which.max(b$y)]
```

Both our $\lambda$ values are above 0, which we can verify as such

```{r}
#| label: Box-Cox - Checking Lambda
#| echo: false
#| eval: true

paste0("Collagen Lambda: ", round(lambda_c, 5))
paste0("Osteocalcin Lambda: ", round(lambda_oc, 5))
```

Since $\lambda$ is greater than 0, we use the formula `(y^lambda - 1) / lambda`

```{r}
#| label: Box-Cox - Applying Transformation

# apply the transformation
coll_data$c_conT <- (c_con^lambda_c - 1) / lambda_c
coll_data$o_conT <- (o_con^lambda_oc - 1) / lambda_oc
```

Now that our data is transformed, we can create GAMs using the `gam()` function from the `mgcv` package.

```{r}
#| label: generalized additive models

# both sexes
cgam_mf <- gam(c_conT ~ s(mean_age, bs = "cr"), method = "REML", data = coll_data)

ogam_mf <- gam(o_conT ~ s(mean_age, bs = "cr"), method = "REML", data = ostc_data)

# males only
cgam_m <- gam(c_conT ~ s(mean_age, bs = "cr"), method = "REML", data = filter(coll_data, sex == "Male"))

ogam_m <- gam(o_conT ~ s(mean_age, bs = "cr"), method = "REML", data = filter(ostc_data, sex == "Male"))

# females only
cgam_f <- gam(c_conT ~ s(mean_age, bs = "cr"), method = "REML", data = filter(coll_data, sex == "Female"))

ogam_f <- gam(o_conT ~ s(mean_age, bs = "cr"), method = "REML", data = filter(ostc_data, sex == "Female"))
```

```{r}
#ggplot(collag1, aes(x = sampleAge, y = c_conT))
#draw(cgam_mf, ci_level = 0.95)

# Add fitted values + 95% CI to your data
fitted_df <- fitted_values(cgam_mf, data = collag1, include_data = TRUE, scale = "response")

ggplot(fitted_df, aes(x = sampleAge, y = .fitted)) +
  geom_ribbon(aes(ymin = .lower_ci, ymax = .upper_ci), fill = "lightblue", alpha = 0.4) +
  geom_line(color = "blue", size = 1.2) +
  geom_point(aes(y = c_conT), color = "gray50", alpha = 0.5, size = 1) +
  labs(
    x = "Age",
    y = "Collagen concentration (nM, SG-corrected)",
    title = "GAM Fit with 95% CI"
  ) +
  theme_minimal()
```
